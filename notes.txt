Schedule:
    Commence    : 10:00 AM
    Tea Break   : 11:30 AM (15 mins)
    Lunch       : 1:00 PM (1 Hr)
    Tea Break   : 3:30 PM (15 mins)
    Wind up     : 5:00 PM

https://forms.gle/T9jvaU7k9ovEFg5H6

Methodology:
    No Powerpoint
    Handson Driven

JavaScript

    Line Oriented
    Procedural 
    Object Based
    Object Oriented
    Functional
    
    Functional + Prototype 
        Functions as data
            Higher Order Functions
                Functions can be passed as parameters to functions
                Functions can be returned from functions
            Variadic functions

    Functions ARE Objects

    static & dynamic

    strongly type & loosely typed

    1. this
    2. arguments
        array like object containing all the arguments passed to the function
            arguments[0]
            arguments[1]
            arguments.length


    In JavaScript, It doesn't matter WHERE the function or WHO owns the function
    what matters is 'HOW' the function is invoked

    this (INVOCATION CONTEXT)

    Function Invocation Patterns
        1. As a method of an obj
            this -> obj
        2. As a function
            this -> global (window i`n the browser)

        3. Using the 'call' method of the function
        4. Using the 'apply' method of the function

        5. Immediately Invoked Function Expression (IIFE)

        6. Using the 'new' keyword (constructor function)
            this -> new object
            this -> returned by default
            convention - function name starts with an upper case letter



apply
bind
call

OO
emp.whoAmI()

Functional
whoAmI.call(obj)

Steps for creating a closure
    1. Outer function
    2. Variable in the outer function
    3. Inner function
    4. Variable in the outer function is referenced in the inner function
    5. Extend the lifetime of the inner function beyond the lifetime of the outer function
        Now, the lifetime of the varible is controlled by the lifetime of the inner function


Assignment
(NO HTML, No Button)
Create a spinner object with 2 methods (increment, decrement)
    spinner.increment() //=> 1
    spinner.increment() //=> 2
    spinner.increment() //=> 3
    spinner.increment() //=> 4

    spinner.decrement() //=> 3
    spinner.decrement() //=> 2
    spinner.decrement() //=> 1
    spinner.decrement() //=> 0
    spinner.decrement() //=> -1

    IMPORTANT NOTE: There should NO OTHER WAY by which the outcome of the methods can be influenced

    The following SHOULD NOT be possible

    spinner.count = 10000
    spinner.increment() //=> SHOULD NOT be 10001

    OR

    count = 10000
    spinner.increment() //=> SHOULD NOT be 10001


function fn(){
    console.log('fn is invoked')
}


function spinnerFactory(){
    var counter = 0;

    function increment(){
        return ++counter;
    }

    function decrement(){
        return --counter;
    }

    return {
        increment: increment,
        decrement: decrement
    }    
}

//usage: 
var spinner = spinnerFactory()
spinner.increment() //=> 1
spinner.increment() //=> 2
spinner.increment() //=> 3

spinner.decrement() //=> 2
spinner.decrement() //=> 1
spinner.decrement() //=> 0
spinner.decrement() //=> -1

Assignment:
Create the spinner as a constructor function


Prototypal inheritance
    An object acts as a base for a family of objects

    The relationship between the 'base' object and 'derived' object is maintained using a hidden attribute '__proto__'

    The process of resolving an attribute by tracing the __proto__ attribute is called 'prototype hopping'

    'prototype hopping' happens ONLY when READING an attribute value

    Never use '__proto__' in the code
        __proto__ is an implementation detail

        1. Accessing the base object should be ONLY through the <ConstructorFunction>.prototype
        2. Why is __proto__ is accessible to the developer?
            Because 'hiding anything in javascript is costly' Why?


Commonility Variability
    Keep what is common together and move out what is varying

Asynchronous Operation
    1. Callbacks
    2. Promises
    3. Async/Await
    4. generators
    5. observables (rxjs)

    Promise an object designed to HOLD the result of an asynchronous operation and notify the subscribers
    Every subscription to a promise returns a new promise

    doSomething()
        .then(doSomethingElse)
        .then(doSomethingElse)
        .then(doSomethingElse)


    1. let
    2. const
    3. array destructuring
    4. rest operator array
    5. spread operator array


Patterns
    1. Revealing Module Pattern